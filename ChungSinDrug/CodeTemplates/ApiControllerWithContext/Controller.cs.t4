<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "api/" + ControllerRootName;
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Http;
using System.Web.Http.Description;
using AutoMapper;
using icdtFramework.Extensions;
using icdtFramework.Helpers;
using icdtFramework.Controllers;
using icdtFramework.Configs;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
#>
    public class <#= ControllerName #> : ApiController
    {
        public IHttpActionResult Get<#= entitySetName #>()
        {
			var returnList = <#= ModelTypeName #>Manager.GetAll();
            return Ok(returnList);
        }

		public IHttpActionResult Get<#= entitySetName #>(string id)
        {
			var theItem = <#= ModelTypeName #>Manager.Get(id);
			if(theItem == null) return BadRequest("Not Found");
            return Ok(theItem);
        }

<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Post<#= ModelTypeName #>(<#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Post<#= ModelTypeName #>(<#= ModelTypeName #>Model <#= ModelVariable #>Model)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
<# if(primaryKeyIsAutoGenerated) { #>
<#		if (UseAsync) { #>
            await db.SaveChangesAsync();
<#		} else { #>
            <#= ModelTypeName #> <#= ModelVariable #> = this.ModelToDomain(<#= ModelVariable #>Model);
			<#= ModelTypeName #>Manager.Create(<#= ModelVariable #>);
<#		} #>
<# } else { #>

            try
            {
<#		if (UseAsync) { #>
                await db.SaveChangesAsync();
<#		} else { #>
                <#= ModelTypeName #> <#= ModelVariable #> = this.ModelToDomain(<#= ModelVariable #>Model);
				<#= ModelTypeName #>Manager.Create(<#= ModelVariable #>);
<#		} #>
            }
            catch (Exception ex)
            {
				return BadRequest("Error has occured during save: " + ex.Message);
            }
<# } #>
            return Ok();
        }
		
<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #> <#= ModelVariable #>)
<# } else { #>
        public IHttpActionResult Put<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id, <#= ModelTypeName #>Model <#= ModelVariable #>Model)
<# } #>
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != <#= ModelVariable #>Model.<#= primaryKeyName #>)
            {
                return BadRequest();
            }

            try
            {
<# if (UseAsync) { #>
                await db.SaveChangesAsync();
<# } else { #>
                <#= ModelTypeName #> <#= ModelVariable #>Item = this.ModelToDomain(<#= ModelVariable #>Model);
		   		<#= ModelTypeName #>Manager.Update(<#= ModelVariable #>Item);
<# } #>
            }
            catch (Exception ex)
            {
				return BadRequest("Error has occured during save: " + ex.Message);
            }

            return Ok();
        }

<# if (UseAsync) { #>
        public async Task<IHttpActionResult> Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } else { #>
        public IHttpActionResult Delete<#= ModelTypeName #>(<#= primaryKeyShortTypeName #> id)
<# } #>
        {
<# if (UseAsync) { #>
            <#= ModelTypeName #> <#= ModelVariable #> = await db.<#= entitySetName #>.FindAsync(id);
<# } else { #>
			<#= ModelTypeName #>  theItem = <#= ModelTypeName #>Manager.Get(id);
<# } #>
            if (theItem == null)
            {
                return BadRequest("Not Found");
            }
			
			try
			{
				<#= ModelTypeName #>Manager.Remove(theItem);
			}
			catch(Exception ex)
			{
				return BadRequest("Error has occured when remove item: " + ex.Message);
			}

            return Ok();
        }

		private <#= ModelTypeName #> ModelToDomain(<#= ModelTypeName #>Model viewModel)
		{
		    <#= ModelTypeName #> <#= ModelVariable #> = new <#= ModelTypeName #>();
            <#= ModelVariable #> = AutoMapperConfig.Mapper.Map<<#= ModelTypeName #>Model, <#= ModelTypeName #>>(viewModel);

            return <#= ModelVariable #>;
		}

		private <#= ModelTypeName #>Model DomainToModel(<#= ModelTypeName #> <#= ModelVariable #>)
		{
		  <#= ModelTypeName #>Model viewModel = new <#= ModelTypeName #>Model();
            viewModel = AutoMapperConfig.Mapper.Map<<#= ModelTypeName #>, <#= ModelTypeName #>Model>(<#= ModelVariable #>);

            return viewModel;
		}
    }
}