<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Net;
using System.Web;
using System.Web.Mvc;
using AutoMapper;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
#>
    public class <#= ControllerName #> : Controller
    {
        public ActionResult Index()
        {
            return View(<#= ModelTypeName #> .GetAll());
        } 

        public ActionResult Create()
        {
            return View(new <#= ModelTypeName #>Model());
        }

<# if (IsOverpostingProtectionRequired) {
    foreach (var line in OverpostingWarningMessage.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)) { 
#>
        // <#= line #>
<# } } #>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<#= bindAttribute #><#= ModelTypeName #>Model <#= ModelVariable #>Model)
        {
            if (ModelState.IsValid)
            {
				try
				{
					<#= ModelTypeName #> <#= ModelVariable #> = ModelToDomain(id);
					<#= ModelTypeName #>Manager.Create(<#= ModelVariable #>);
					ViewBag.IsFinish = "";
				}
				catche(Exception)
				{
				}
			}

            return View(<#= ModelVariable #>);
        }


        public ActionResult Edit(<#= primaryKeyNullableTypeName #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
			<#= ModelTypeName #> <#= ModelTypeName #>Manager = <#= ModelTypeName #>Manager.GetById(id);
			var <#= ModelTypeName #>ModelObj = <#= ModelTypeName #>Manager.DomainToModel(<#= ModelTypeName #>Manager);
            if (<#= ModelTypeName #>ModelObj  == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelTypeName #>ModelObj );
        }

<# if (IsOverpostingProtectionRequired) {
    foreach (var line in OverpostingWarningMessage.Split(new string[] { Environment.NewLine }, StringSplitOptions.None)) { 
#>
        // <#= line #>
<# } } #>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(<#= ModelTypeName #>Model <#= ModelVariable #>Model)
        {
            if (ModelState.IsValid)
            {
				try
				{
					<#= ModelTypeName #> <#= ModelTypeName #>Obj = ModelToDomain(<#= ModelVariable #>);

		     		<#= ModelTypeName #>Manager.Update(<#= ModelTypeName #>Obj);
					 ViewBag.IsFinish = "";
				}
				catche(Exection)
				{
					 ViewBag.IsFinish = "";
				}
		    }
            return View(<#= ModelVariable #>);
        }

        
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
        {
			try
			{
			  <#= ModelTypeName #>  <#= ModelTypeName #>Obj = <#= ModelTypeName #>Manager.GetById(id);
			  <#= ModelTypeName #>Manager.Remove(<#= ModelTypeName #>Obj);
			}
			catche(Exception)
			{
			}
		 
			return RedirectToAction("Index");
		}


		private <#= ModelTypeName #> ModelToDomain(<#= ModelTypeName #>Model viewModel)
		{
		    <#= ModelTypeName #> <#= ModelVariable #> = new <#= ModelTypeName #>();
            Mapper.CreateMap<<#= ModelTypeName #>Model, <#= ModelTypeName #>>();
            <#= ModelTypeName #> = Mapper.Map<<#= ModelTypeName #>Model, <#= ModelTypeName #>>(viewModel);

            return <#= ModelVariable #>;
		}

		private <#= ModelTypeName #> DomainToModel(<#= ModelTypeName #> <#= ModelVariable #>)
		{
		  <#= ModelTypeName #>Model viewModel = new <#= ModelTypeName #>Model();
            Mapper.CreateMap<<#= ModelTypeName #>, <#= ModelTypeName #>Model>();
            viewModel = Mapper.Map<<#= ModelTypeName #>, <#= ModelTypeName #>Model>(<#= ModelVariable #>);

            return viewModel;
		}

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>