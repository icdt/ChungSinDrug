<#@ template language="C#" debug="True" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Users\icdt\Desktop\chg\ChungSinDrug\ChungSinDrug\bin\ChungSinDrug.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ include file="T4Toolbox.tt" #>
<#
string projectName = "ChungSinDrug";
string modelName = "News";
string modelVariable = "news";
string modelDbSetName = "News";
string savePath = "\\Models\\News\\NewsManager.cs";
var project = GetProjectContainingFile("News.cs");
var domainModels = GetClassesOf(project).ToList();	
#>
using PagedList;
using System;
using System.Collections.Generic;
using System.Linq;
using icdtFramework.Helpers;

namespace <#=projectName#>.Models
{
    public static class <#=modelName#>Manager
    {
        private static List<<#=modelName#>> _<#=modelName#>Cache = new List<<#=modelName#>>();
        private static object _<#=modelVariable#>QueueLock = new Object();

        #region 初始化
        //初始化
        //public static void Initial()
        //{
        //    using (ApplicationDbContext db = new ApplicationDbContext())
        //    {
        //        var query = db.<#=modelDbSetName#>.AsQueryable();
        //        query = query.Where(a => a.<#=modelName#>_DelLock == false);

        //        _<#=modelName#>Cache = query.ToList();
        //    }
        //}
        #endregion

        #region 基本操作 (db & cache)
        //取得所有記錄
        public static List<<#=modelName#>> GetAll()
        {
            using (ApplicationDbContext db = new ApplicationDbContext())
            {
                return db.<#=modelDbSetName#>.Where(a => a.<#=modelName#>_DelLock == false).ToList();
            }
        }

        //分頁
        public static IPagedList<<#=modelName#>> GetPagedList(int pageNumber, int pageSize)
        {
            using (ApplicationDbContext db = new ApplicationDbContext())
            {
                return db.<#=modelDbSetName#>.Where(a => a.<#=modelName#>_DelLock == false)
				.OrderByDescending(a => a.<#=modelName#>_CreateTime)
				.ToPagedList(pageNumber, pageSize);
            }
        }

        //透過Id取得記錄
        public static <#=modelName#> Get(string id)
        {
            using (ApplicationDbContext db = new ApplicationDbContext())
            {
                return db.<#=modelDbSetName#>.FirstOrDefault(a => a.<#=modelName#>_Id == id);
            }
        }

        //新增單一記錄
        public static void Create(<#=modelName#> <#=modelVariable#>)
        {
            Create(new List<<#=modelName#>>() { <#=modelVariable#> });
        }

        //新增多筆記錄
        public static void Create(List<<#=modelName#>> <#=modelVariable#>s)
        {
            //更新資料庫
            using (ApplicationDbContext db = new ApplicationDbContext())
            {
                db.<#=modelDbSetName#>.AddRange(<#=modelVariable#>s);
                db.SaveChanges();
            }

        }

        //更新一筆記錄
        public static void Update(<#=modelName#> <#=modelVariable#>s)
        {
            Update(new List<<#=modelName#>>() { <#=modelVariable#>s });
        }

        //更新多筆記錄
        public static void Update(List<<#=modelName#>> <#=modelVariable#>s)
        {
            //更新資料庫
            using (ApplicationDbContext db = new ApplicationDbContext())
            {
                var objIDs = <#=modelVariable#>s.Select(a => a.<#=modelName#>_Id).ToList();
                var objInDB = db.<#=modelDbSetName#>.Where(a => objIDs.Contains(a.<#=modelName#>_Id)).ToList();

                foreach (<#=modelName#> item in objInDB)
                {
                    var theNewFromOutside = <#=modelVariable#>s.FirstOrDefault(a => a.<#=modelName#>_Id == item.<#=modelName#>_Id);
				   <#foreach(var domainModel in domainModels)
					 {
					   if (modelName.Equals(domainModel.Name))
					   {
					   #>
						  <#foreach(var property in FindProperties(domainModel.Members))
						 {
							bool isStartOfDay = icdtFramework.CustomViewTemplate.T4Helpers.T4IsStartOfDay(domainModel.Name, property.Name);
							bool isEndOfDay = icdtFramework.CustomViewTemplate.T4Helpers.T4IsEndOfDay(domainModel.Name, property.Name);
							if(isStartOfDay){ 
						 #>
								item.<#=property.Name#> = DateTimeHelper.StartOfDay(theNewFromOutside.<#=property.Name#>);
							<# }else if(isEndOfDay){ #>
								item.<#=property.Name#> = DateTimeHelper.EndOfDay(theNewFromOutside.<#=property.Name#>);
							<# }else{ #>
								item.<#=property.Name#> = theNewFromOutside.<#=property.Name#>;
							<#}#>
						<#}#>
				     <#}#>
				   <#}#>
                }

                lock (_<#=modelVariable#>QueueLock)
                {
                    db.SaveChanges();
                }
            }
        }

        //刪除一筆記錄
        public static void Remove(<#=modelName#> <#=modelVariable#>)
        {
            Remove(new List<<#=modelName#>>() { <#=modelVariable#> });
        }

        //刪除多筆記錄
        public static void Remove(List<<#=modelName#>> <#=modelVariable#>s)
        {
            //更新資料庫
            using (ApplicationDbContext db = new ApplicationDbContext())
            {
                var objIDs = <#=modelVariable#>s.Select(a => a.<#=modelName#>_Id).ToList();
                var objInDB = db.<#=modelDbSetName#>.Where(a => objIDs.Contains(a.<#=modelName#>_Id)).ToList();

                foreach (var item in objInDB)
                {
                    item.<#=modelName#>_DelLock = true;
                }

                lock (_<#=modelVariable#>QueueLock)
                {
                    db.SaveChanges();
                }
            }
        }
        #endregion

        #region 進階查詢

        #endregion
    }
}
<#
SaveOutput(savePath);
#>

<#@ import namespace="System.IO" #>
<#+
  void SaveOutput(string outputFileName)
  {
	  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	  CreatDirectory(templateDirectory,outputFileName);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }
#>
<#+
void CreatDirectory(string basePath,string outputFileName){
	var arrayDirectory = outputFileName.Split(new char[]{'\\'});
	var pathList = new List<string>();
	for (int i = 0 ; i < arrayDirectory.Length - 1;i++)
	{
		pathList.Add(arrayDirectory[i]);
		var path = basePath + "\\" + String.Join("\\",pathList.ToArray());
		if(!Directory.Exists(path))
		{
			Directory.CreateDirectory(path);
		}
	}
}
#>

<#+
	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<EnvDTE.ProjectItem>();
		
		if (items == null) return ret;
		
		foreach(EnvDTE.ProjectItem item in items)
		{
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}
		
		return ret;
	}

	public string GetListedType(EnvDTE.CodeProperty property)
    {
		return property.Type.AsFullName.Replace("System.Collections.Generic.List<", "").Replace(">","");
    }

	public EnvDTE.Project GetProjectContainingFile(string filename)
    {
		var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
		return visualStudio.Solution.FindProjectItem(filename).ContainingProject as EnvDTE.Project;
	}

	public List<EnvDTE.CodeClass> GetClassesOf(EnvDTE.Project project)
	{
		var items = GetProjectItemsRecursively(project.ProjectItems);

		var classes = new List<EnvDTE.CodeClass>();

		foreach(var item in items)
        {
			if(item.FileCodeModel != null)
            {
				foreach (EnvDTE.CodeElement element in item.FileCodeModel.CodeElements)
				{
					if (element is EnvDTE.CodeNamespace)
					{
						EnvDTE.CodeNamespace ns = (EnvDTE.CodeNamespace)element;
					
						foreach (EnvDTE.CodeElement elem in ns.Members)
						{
							if (elem is EnvDTE.CodeClass)
							{
								classes.Add(elem as EnvDTE.CodeClass);
							}
						}
					}
				}
            }
        }

		return classes;
	}

	public List<EnvDTE.CodeProperty> FindProperties(EnvDTE.CodeElements elements)
    {
        List<EnvDTE.CodeProperty> properties = new List<EnvDTE.CodeProperty>();
        
        foreach (EnvDTE.CodeElement element in elements)
        {
            EnvDTE.CodeProperty p = element as EnvDTE.CodeProperty;
        
            if (p != null)
                properties.Add(p);            
        }
    
        return properties;
    }
	#>